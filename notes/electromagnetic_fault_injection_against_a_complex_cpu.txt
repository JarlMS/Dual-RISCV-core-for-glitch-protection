- Electromagnetic fault injection against a complex CPU, toward new micro-architectural fault models -

Electromagnetic fault injection - EMFI 

Hardware security is usually not the main concern when developing a complex CPU. Mostly they are tuned for the 
best performance/energy consumption trade-off and software hardening. 

For testing, only one core is enabled because you cannot easily link a fault in unified memory with a particular core 
if more of them are running. 

* Memory management unit - MMU 

The MMU aims to virtualize the physical memory of the system into a virtual one to segregate each app in their own 
address space. Therefore the CPU only works with virtual addresses, and during a memory access to one of them, the MMU translates 
it into the corresponding physical address, which is transmitted to the memory controller. 

The information required for the translation of an address is called a page table entry (PTE), and is stored in the 
physical memory and cached in the translation looaside buffer (TLB). There is a PTE for all allocated pages in the physical memory. 

The bare-metal implementation in this paper allocates the whole address space with an identity mapping (virtual and physical addresses
are the same).

In modern systems, the translation phase also checks if the page can be written or not, which kind of process (user or supervisor)
can access ir or should the page be stored in cache or not. 

* Injection signal 

The signal parameters (shape, frequency, number of periods) have an optimal value with respect to our prequirements:
    
    * The shape is a sinus to reduce the presence of harmonics in the amplification chain
    * The frequency (275 MHZ) maximizes the probe gain. The sinus period is then 3.6ns or ~4.3 clock periods
    * The amplitude (-14dBm) has been manually tuned during fault injection untill the desire effect is achieved. 
        > Too low: no faults are observed 
        > Too high: chip crashes and must be rebooted

* Temporal synchronization 

The main difficulty for fault injection is the temporal synchronization: when to inject a fault on the targeted and 
vulnerable instructions. 

Memory transfers are particularly vulnerable to EMFI. They are also slower than the core pipeline, allowing for a bigger fault 
injection timing window. 

* Fault on the instruction cache 

The paper was not able to prevent or modify the execution of an instruction directly. The faults are instead inserted during cache transfers, which is probably because the bus 
involved is easily coupled with the EM probe. 

The L1I cache is invalidated just before launching the application, artificially triggering a memory transfer. 

The fault injection resulted in the wrong instruction being stored in the cache, and thus a coutner value in the test program was not incremented correctly. 

This fault can easily be exploited because it induces an instruction replacement fault model, where an instruction is replaced by another. It can often be reduced to the classical instruction 
skip model, if the new instruction has no side effects on the application. However, since the faulted value is still present in the instruction cache, it will stay 
faulted untill the cache is invalidated: we can call this model "sticky instruction skip". This fault model can be used to hijack the control flow and initiate 
a 'return-oriented programming' (ROP) attack, among others. 

* Targeting the Memory Management Unit

This fault is based on corrupting the virtual-to-physical memory mapping, albeit 'in an uncontrolled manner'. The faults presented in the paper 'always' crash the test program. 

A fault in the MMU can lead to:
    * Pages being incorrectly mapped to 0x0
    * Pages being shifted such that the virtual address does not correspond to the physical one. 

If we invalidate the 'Translation Lookaside Buffer' (TLB) after a fault, nothing changes: Tha mappings are still modified. 
The fault on the MMU shifts the page tables in memoy and inserts errors on it. The tables are still present, with small 
modifications, but at another base address. 

This fault shows that the cornerstone of the key security feature in any CPU, namely memory isolation, does not withstand 
fault injection. 

* Shifting data chunks in L2 

Using the same injection parameters as when targeting the MMU, we can achieve a new reproducible faulted behaviour where
the chip is trapped in an infinite loop. 

A fault in the L2 cache can impact either the instructions or the data giving more power to the attacker. Nevertheless, 
they do not control in what way the memory will be modified. 

* Defence mechanisms 

The paper has shown that the memory hierarchy and the MMU can easily be corrupted. However, other micro-architectual elements might 
also be confused by the injected fault. 

To ensure integrity and authenticity in cache memories, two strategies can be deployed. One way of doing this is with 
error correcting codes (ECCs). They are efficient at detecting a limited number of random faults: this solution is 
relatively low cost but assumes that the attacker has no control over the fault value and cannot inject a lot of faults. In the 
other case the attacker would be able to inject random faults until one passes the ECC scheme. 

Only considering fault injection though EMFI, this method is good enough as the attacker lacks control of the fault injection. 